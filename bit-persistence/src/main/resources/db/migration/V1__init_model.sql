CREATE TABLE public.PROJECT (
	ID SERIAL PRIMARY KEY,
	NAME VARCHAR(255) NOT NULL UNIQUE,
	START_DATE DATE NOT NULL,
	TARGET_END_DATE DATE NOT NULL,
	ACTUAL_END_DATE DATE,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(255) NOT NULL,
	MODIFIED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_BY VARCHAR(255) NOT NULL
);

CREATE TABLE public.PEOPLE (
	ID SERIAL PRIMARY KEY,
	NAME VARCHAR(255) NOT NULL UNIQUE,
	EMAIL VARCHAR(255) NOT NULL,
	ROLE VARCHAR(30) NOT NULL,
	USERNAME VARCHAR(255) NOT NULL UNIQUE,
	PROJECT_ID INT REFERENCES PROJECT(ID),
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(255) NOT NULL,
	MODIFIED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_BY VARCHAR(255) NOT NULL
);

CREATE TABLE public.ISSUE (
	ID SERIAL PRIMARY KEY,
	SUMMARY VARCHAR(255) NOT NULL,
	DESCRIPTION TEXT,
	IDENTIFIED_PERSON_ID INT NOT NULL REFERENCES PEOPLE(ID),
	IDENTIFIED_DATE DATE NOT NULL,
	RELATED_PROJECT_ID INT NOT NULL REFERENCES PROJECT(ID),
	ASSIGNED_PERSON_ID INT REFERENCES PEOPLE(ID),
	STATUS VARCHAR(30) NOT NULL,
	PRIORITY VARCHAR(30),
	TARGET_RESOLUTION_DATE DATE,
	PROGRESS TEXT,
	ACTUAL_RESOLUTION_DATE DATE,
	RESOLUTION_SUMMARY TEXT,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(255) NOT NULL,
	MODIFIED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_BY VARCHAR(255) NOT NULL
);


/*
	FUNCTION TO UPDATE MODIFIED_ON COLUMN
*/
CREATE OR REPLACE FUNCTION UPDATE_MODIFIED_ON_COLUMN()
RETURNS TRIGGER AS $$
BEGIN
   IF row(NEW.*) IS DISTINCT FROM row(OLD.*) THEN
      NEW.MODIFIED_BY = now(); 
      RETURN NEW;
   ELSE
      RETURN OLD;
   END IF;
END;
$$ language 'plpgsql';

-- CREATE TRIGGERS
CREATE TRIGGER TRG_MODIFIED_ON_PROJECT 
BEFORE UPDATE 
ON public.PROJECT 
FOR EACH ROW 
EXECUTE PROCEDURE UPDATE_MODIFIED_ON_COLUMN();

CREATE TRIGGER TRG_MODIFIED_ON_PEOPLE 
BEFORE UPDATE 
ON public.PEOPLE 
FOR EACH ROW 
EXECUTE PROCEDURE UPDATE_MODIFIED_ON_COLUMN();

CREATE TRIGGER TRG_MODIFIED_ON_ISSUE 
BEFORE UPDATE 
ON public.ISSUE 
FOR EACH ROW 
EXECUTE PROCEDURE UPDATE_MODIFIED_ON_COLUMN();